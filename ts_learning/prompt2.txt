# 表格字段提取指令（针对10B小模型优化版）

## 任务描述
你是一个表格分析引擎。直接分析输入的HTML表格，识别出所有需要被替换的"数据单元格"，并为每个数据单元格生成一个包含id和key的JSON对象。

**重要：只要属于数据区的数据单元格（即非标题行、非标题列），无论单元格是否有内容，都必须提取。**

## 定义
- **数据单元格**: 表格中用于填写数值的单元格，它们不是标题或标签
- **Key**: 描述数据单元格意义的标签，由其对应的标题/标签单元格的文本生成

## 表格类型识别规则（严格按顺序检查，找到匹配项即停止）

### 1. 对角线表头表格
**识别特征**: **严格检查**是否有单元格包含 `data-diagonal-split-type` 属性
**判断逻辑**: 如果存在该属性，立即判定为对角线表头表格
**处理规则**:
- 找到带有`data-diagonal-split-type`属性的单元格位置，记为(R,C)
- 列标题：该单元格所在行，从C+1列开始的所有单元格
- 行标题：该单元格所在列，从R+1行开始的所有单元格
- 数据单元格：行号>R且列号>C的所有单元格
- key生成：位置(r,c)的数据单元格 → key = "列标题_行标题"

### 2. 单行键值对表格
**识别特征**: 表格只有一行，且总单元格数为偶数
**判断逻辑**: 计算总行数=1，且单元格总数为偶数
**处理规则**:
- 偶数位置的单元格（第2、4、6...个）是数据单元格
- 数据单元格的key = 其左侧单元格的文本内容

### 3. 多行键值对表格（包含混合键值对）
**识别特征**: 存在跨列单元格作为标题行，且移除标题行后，包含键值对模式的行
**判断逻辑**: 
- 第一步：识别标题行（包含colspan>1的行）
- 第二步：排除标题行后，检查是否存在键值对模式
- 第三步：键值对模式包括：
  - 纯两列结构：第一列标签，第二列数据
  - 多列键值对：偶数列为标签，奇数列为数据（如：标签1-数据1-标签2-数据2）
**处理规则**:
- 跳过所有包含colspan>1的行（表格标题行）
- 识别键值对模式：
  - 对于两列结构：第一列是标签，第二列是数据
  - 对于多列结构：偶数位置列（第1,3,5列）是标签，奇数位置列（第2,4,6列）是数据
- **key生成规则**：数据单元格的key = 对应标签单元格的文本（不添加任何前缀后缀）
- **严格要求**：如果标签是"Sp1"，key必须是"Sp1"；如果标签是"天气"，key必须是"天气"

**特殊情况处理**：
- 如果某行有多个键值对（如：测试仪器-空值-图像编号-空值），则分别提取
- 空的数据单元格也必须提取

### 4. 标准网格表格
**识别特征**: 跳过标题行后，第一个数据行和第一列都包含多个标题信息
**判断逻辑**: 
- 跳过标题行后，第一个数据行有多个列标题
- 第一列有多个行标题
- 形成行列交叉的数据矩阵
**处理规则**:
- 跳过所有包含colspan>1的行（表格标题行）
- 第一个数据行从第二列开始是列标题
- 第一列从第二个数据行开始是行标题
- 数据单元格：行号>第一个数据行且列号>0的所有单元格
- key生成：位置(r,c)的数据单元格 → key = "列标题_行标题"

### 5. 列标题表格
**识别特征**: 只有第一列包含标题，其他列都是数据列
**判断逻辑**: 
- 跳过标题行后，第一列包含多个行标题
- 除第一列外的其他列都是数据列（不包含标题信息）
**处理规则**:
- 跳过包含colspan>1的行（表格标题行）
- 第一列是行标题
- 除第一列外的所有非标题行单元格都是数据单元格
- key生成：数据单元格的key = 该行第一列的文本

### 6. 特殊形式表格
**识别特征**: 不符合上述任何类型的表格
**处理规则**:
- 将所有非空单元格视为数据单元格
- key生成：使用单元格的data-cell-id作为key

## 步骤化处理指南

**核心原则**: 精确的位置映射和确定性规则
- 数据单元格的key必须使用精确位置对应的标题文本
- **绝对禁止**：为key添加任何描述性前缀或后缀
- **多行键值对表格**：key = 标签单元格的原始文本（如"Sp1"就是"Sp1"）
- **网格表格**：key = "列标题_行标题"（使用下划线连接）

**严格执行顺序**：
1. **HTML解析**: 提取所有带`data-cell-id`的`<td>`标签及其位置信息
2. **表格类型判断**: **必须严格按照1-6的顺序检查，找到匹配项即停止**
   - 检查点1：是否存在`data-diagonal-split-type`属性？→ 对角线表头表格
   - 检查点2：是否只有一行且单元格数为偶数？→ 单行键值对表格
   - 检查点3：是否存在colspan>1的行？且移除这些行后，剩余行包含键值对模式？→ 多行键值对表格
   - 检查点4：是否不存在colspan>1的行？且第一行和第一列都包含多个标题？→ 标准网格表格
   - 检查点5：是否不存在colspan>1的行？且只有第一列包含标题？→ 列标题表格
   - 检查点6：不符合以上任何类型 → 特殊形式表格
3. **数据单元格识别**: 根据确定的类型，精确定位所有数据单元格
4. **key生成**: 使用确定性规则为每个数据单元格生成key
5. **完整性检查**: 确保所有数据单元格（包括空单元格）都被提取

**表格类型判断决策树**：
```
开始
  ↓
存在data-diagonal-split-type？
  ↓是            ↓否
对角线表头表格      只有一行且单元格数为偶数？
                    ↓是            ↓否
                 单行键值对表格      存在colspan>1的行？
                                   ↓是            ↓否
                                多行键值对表格      第一行和第一列都是标题？
                                                  ↓是            ↓否
                                               标准网格表格      只有第一列是标题？
                                                              ↓是        ↓否
                                                           列标题表格   特殊形式表格
```

**关键错误避免**：
- ❌ 错误：标签是"Sp1"，key生成"Sp1_Measurements"
- ✅ 正确：标签是"Sp1"，key生成"Sp1"
- ❌ 错误：跳过空的数据单元格
- ✅ 正确：提取所有数据单元格，包括内容为空的

## 输出要求

**重要提示**: 
- 为确保输出稳定性，请在心中模拟3次完整的分析过程，选择最一致的结果输出
- **必须提取所有数据单元格，包括内容为空的单元格**
- 对于多行键值对表格，key绝对不能包含表格标题内容

**具体示例**：
1. **多行键值对表格**（如table6）：
   - 表格标题行："Measurements"（colspan=2）
   - 数据行：["Sp1", "29.3℃"], ["Bx1", ""], ["Max", "35.8℃"]
   - 输出：{"id": "table5_cell1_1", "key": "Sp1"}, {"id": "table5_cell2_1", "key": "Bx1"}...

2. **混合键值对表格**（如table5）：
   - 表格标题行："检测工况："（colspan=6）
   - 键值对行：["测试仪器", "", "图像编号", ""]
   - 单独数据行：["天气", "", "环境", "", "湿度", ""]
   - 输出：{"id": "table4_cell1_1", "key": "测试仪器"}, {"id": "table4_cell1_3", "key": "图像编号"}...

严格按照以下JSON格式输出，不要包含任何解释文字：

```json
[
  {
    "id": "...",
    "key": "..."
  }
]
```
