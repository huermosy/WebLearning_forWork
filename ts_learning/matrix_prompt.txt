# 矩阵化表格提取指令（10B小语言模型专用）

## 任务描述

分析HTML表格，提取所有数据单元格，并生成(id,key)对。

## 数学建模方法

我们将表格看作一个二维矩阵T，每个单元格T(i,j)具有以下属性：
- 位置坐标(i,j)
- 结构属性：colspan(i,j), rowspan(i,j)
- 特殊属性：如diagonal-split(i,j)
- 内容：text(i,j)

## 表格类型判定与处理（严格按顺序）

### 类型1：对角线表头表格
**特征方程**：∃(r,c): diagonal-split(r,c)=true
**数据单元格集合**：D = {(i,j) | i>r, j>c}
**键生成函数**：K(i,j) = text(r,j) + "_" + text(i,c)

### 类型2：单行键值对表格
**特征方程**：rows(T)=1 且 cells(T)%2=0
**数据单元格集合**：D = {(0,j) | j%2=1}
**键生成函数**：K(0,j) = text(0,j-1)

### 类型3：多行键值对表格
**特征方程**：∃i: colspan(i,0)>1 且 剩余行形成键值对
**数据单元格集合**：D = {(i,j) | i不是标题行, j%2=1}
**键生成函数**：K(i,j) = text(i,j-1)

### 类型4：标准网格表格
**特征方程**：∀j: isHeader(0,j)=true 且 ∀i: isHeader(i,0)=true
**数据单元格集合**：D = {(i,j) | i>0, j>0}
**键生成函数**：K(i,j) = text(0,j) + "_" + text(i,0)

### 类型5：列标题表格
**特征方程**：∀i: isHeader(i,0)=true 且 ∀j>0: isHeader(0,j)=false
**数据单元格集合**：D = {(i,j) | j>0}
**键生成函数**：K(i,j) = text(i,0)

## 处理算法

1. 将HTML表格解析为矩阵表示T
2. 计算矩阵T的特征向量F(T)=[f1,f2,f3,f4,f5]
   - f1: 是否存在对角线分隔单元格
   - f2: 是否只有1行且单元格数为偶数
   - f3: 是否有标题行且余下行为键值对
   - f4: 第一行和第一列是否都是标题
   - f5: 是否只有第一列是标题
3. 应用类型判定算法：type(T) = 第一个值为true的fi的索引i
4. 根据表格类型确定数据单元格集合D
5. 对每个(i,j)∈D，计算key = K(i,j)
6. 输出结果集R = {(id(i,j), K(i,j)) | (i,j)∈D}

## 单元格身份判定规则

1. **标题单元格**：满足以下任一条件
   - colspan > 1 或 rowspan > 1
   - 位于表格第一行或第一列
   - 包含描述性文本而非数值

2. **数据单元格**：满足以下所有条件
   - 不是标题单元格
   - 根据表格类型位于数据区域内
   - 可以为空或包含任意内容

## 示例分析

对于表格：
```
[["Measurements" (colspan=2)],
 ["Sp1", "29.3℃"],
 ["Bx1", ""],
 ["Max", "35.8℃"]]
```

特征向量F(T) = [0,0,1,0,0]（类型3：多行键值对）
数据单元格：(1,1), (2,1), (3,1)
生成的键：
- K(1,1) = text(1,0) = "Sp1"
- K(2,1) = text(2,0) = "Bx1"
- K(3,1) = text(3,0) = "Max"

输出：
```json
[
  {"id": "table5_cell1_1", "key": "Sp1"},
  {"id": "table5_cell2_1", "key": "Bx1"},
  {"id": "table5_cell3_1", "key": "Max"}
]
```

## 关键注意点

1. 键生成严格按照位置映射，不添加任何前缀后缀
2. 必须提取所有数据单元格，包括空单元格
3. 表格类型判定必须按1→5顺序，一旦匹配立即确定
4. 混合键值对表格（如多列键值对）也算作类型3
